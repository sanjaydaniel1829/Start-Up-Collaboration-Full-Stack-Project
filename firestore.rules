rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // Comments collection
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // Stories collection
    match /stories/{storyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // Chat messages collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (resource.data.participants[request.auth.uid] == true);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.participants[request.auth.uid] == true);
    }
    
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/chats/$(chatId)).data.participants[request.auth.uid] == true;
    }
  }
}
